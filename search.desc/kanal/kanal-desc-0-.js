searchState.loadedDescShard("kanal", 0, "Kanal\n<code>AsyncReceiver</code> is receiving side of the channel in async …\nSending side of the channel with async API.  It’s …\nIndicates that the channel is closed on both sides with …\nIndicates that the channel is closed on both sides with a …\nIndicates that the channel is closed on both sides with a …\nIndicates that the channel is closed on both sides with a …\n<code>OneshotAsyncReceiver&lt;T&gt;</code> is the receiver side of oneshot …\n<code>OneshotAsyncSender&lt;T&gt;</code> is the sender side of oneshot …\nError type for oneshot channel receive failed operation\nOneshot channel receive future that asynchronously …\n<code>OneshotReceiver&lt;T&gt;</code> is the receiver side of oneshot channel …\nOneshot channel send future that asynchronously sends data …\n<code>OneshotSender&lt;T&gt;</code> is the sender side of oneshot channel …\nIndicates that all receiver instances are dropped and the …\nIndicates that all receiver instances are dropped and the …\nError type for channel receive operations without timeout\nError type for channel receive operations with timeout\nReceive future to receive an object from the channel …\nReceive stream\nReceiving side of the channel in sync mode. Receivers can …\nIndicates that all sender instances are dropped and the …\nIndicates that all sender instances are dropped and the …\nError type for channel send operations without timeout\nError type for channel send operations with timeout\nSend future to send an object to the channel asynchronously\nSending side of the channel with sync API. It’s possible …\nIndicates that channel operation reached timeout and is …\nIndicates that channel operation reached timeout and is …\nBorrows <code>Sender</code> as <code>AsyncSender</code> and returns it\nBorrows <code>Receiver</code> as <code>AsyncReceiver</code> and returns it.\nBorrows <code>AsyncSender</code> as <code>Sender</code> and returns it.\nBorrows <code>AsyncReceiver</code> as <code>Receiver</code> and returns it\nCreates a new sync bounded channel with the requested …\nCreates a new async bounded channel with the requested …\nReturns capacity of channel (not the queue) for unbounded …\nReturns capacity of channel (not the queue) for unbounded …\nReturns capacity of channel (not the queue) for unbounded …\nReturns capacity of channel (not the queue) for unbounded …\nClones <code>Sender</code> as the async version of it and returns it\nClones receiver as the async version of it\nClones <code>AsyncSender</code> as <code>Sender</code> with sync api of it.\nReturns sync cloned version of the receiver.\nCloses the channel completely on both sides and terminates …\nCloses the channel completely on both sides and terminates …\nCloses the channel completely on both sides and terminates …\nCloses the channel completely on both sides and terminates …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the channel is bounded or not.\nReturns whether the channel is bounded or not.\nReturns whether the channel is bounded or not.\nReturns whether the channel is bounded or not.\nReturns whether the channel is closed on both side of send …\nReturns whether the channel is closed on both side of send …\nReturns whether the channel is closed on both side of send …\nReturns whether the channel is closed on both side of send …\nReturns whether the receive side of the channel is closed …\nReturns whether the receive side of the channel is closed …\nReturns, whether the send side of the channel, is closed …\nReturns, whether the send side of the channel, is closed …\nReturns whether the channel queue is empty or not.\nReturns whether the channel queue is empty or not.\nReturns whether the channel queue is empty or not.\nReturns whether the channel queue is empty or not.\nReturns whether the channel queue is full or not full …\nReturns whether the channel queue is full or not full …\nReturns whether the channel queue is full or not full …\nReturns whether the channel queue is full or not full …\nReturns, whether the channel receive side is terminated, …\nReturns, whether the channel receive side is terminated, …\nReturns length of the queue.\nReturns length of the queue.\nReturns length of the queue.\nReturns length of the queue.\nCreates new oneshot channel and returns the …\nCreates new oneshot channel and returns the async …\nReturns count of alive receiver instances of the channel.\nReturns count of alive receiver instances of the channel.\nReturns count of alive receiver instances of the channel.\nReturns count of alive receiver instances of the channel.\nReceives a message from the channel and consumes the …\nReturns a receive future for receiving data from the …\nReceives data from the channel\nReturns a <code>ReceiveFuture</code> to receive data from the channel …\nTries receiving from the channel within a duration\nSends a message to the channel and consumes the send side …\nReturns a future to send a message to the channel and …\nSends data to the channel.\nSends data asynchronously to the channel.\nTries to send data from provided option with a deadline, …\nSends data to the channel with a deadline, if send fails …\nReturns count of alive sender instances of the channel.\nReturns count of alive sender instances of the channel.\nReturns count of alive sender instances of the channel.\nReturns count of alive sender instances of the channel.\nCreates a asynchronous stream for the channel to receive …\nConverts sender to async variant of it to be used in async …\nConverts receiver to async variant of it to be used in …\nConverts <code>Sender</code> to <code>AsyncSender</code> and returns it\nConverts <code>Receiver</code> to <code>AsyncReceiver</code> and returns it.\nConverts async sender to sync variant of it to be used in …\nConverts async receiver to sync variant of it to be used …\nConverts <code>AsyncSender</code> to <code>Sender</code> and returns it.\nConverts <code>AsyncReceiver</code> to <code>Receiver</code> and returns it.\nTries receiving from the channel without waiting on the …\nTries receiving from the channel without waiting on the …\nTries receiving from the channel without waiting on the …\nTries receiving from the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nTries sending to the channel without waiting on the …\nCreates a new sync unbounded channel, and returns <code>Sender</code> …\nCreates a new async unbounded channel, and returns …")