searchState.loadedDescShard("simplelog", 0, "<code>simplelog</code> provides a series of logging facilities, that …\nTry very hard to emit colors. This includes emitting ANSI …\nAlwaysAnsi is like Always, except it never tries to use …\nTry to use colors, but don’t force the issue. If the …\nIf this thread is named, log the name. Otherwise, log the …\nThe set of available colors for the terminal …\nColorChoice represents the color preferences of an end …\nThe CombinedLogger struct. Provides a Logger …\nA minimal representation of a single non-literal item.\nA series of literals or components that collectively form …\nConfiguration for the Loggers\nBuilder for the Logger Configurations (<code>Config</code>)\nThe “debug” level.\nCorresponds to the <code>Debug</code> log level.\nThe “error” level.\nCorresponds to the <code>Error</code> log level.\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA complete description of how to format and parse a type.\nLog thread ids only\nThe “info” level.\nCorresponds to the <code>Info</code> log level.\nAdd spaces on the left side\nAdd spaces on the left side, up to usize many\nAdd spaces on the left side, up to usize many\nAn enum representing the available verbosity levels of the …\nAn enum representing the available verbosity level filters …\nPadding to be used for logging the level\nBytes that are formatted as-is.\nUse Stderr for Errors and Stdout otherwise\nLog the thread names only\nNever emit colors.\nA level lower than all log levels.\nDo not pad the level\nDo not pad the thread id/name\nDo not pad the thread id/name\nA <code>FormatItem</code> that may or may not be present when parsing. …\nAdd spaces on the right side\nAdd spaces on the right side, up to usize many\nAdd spaces on the right side, up to usize many\nTrait to have a common interface to obtain the Level of …\nThe SimpleLogger struct. Provides a very basic Logger …\nOnly use Stderr\nOnly use Stdout\nPadding to be used for logging the thread id/name\nThe TermLogger struct. Provides a stderr/out based Logger …\nSpecifies which streams should be used when logging\nMode for logging the thread name or id or both.\nPadding to be used for logging the thread id/name\nThe “trace” level.\nCorresponds to the <code>Trace</code> log level.\nThe “warn” level.\nCorresponds to the <code>Warn</code> log level.\nThe WriteLogger struct. Provides a Logger implementation …\nAdd allowed module filters. If any are specified, only …\nAdd allowed module filters. If any are specified, only …\nAdd denied module filters. If any are specified, records …\nAdd denied module filters. If any are specified, records …\nReturns the logger as a Log trait object\nReturns the string representation of the <code>Level</code>.\nReturns the string representation of the <code>LevelFilter</code>.\nBuild new <code>Config</code>\nClear allowed module filters. If none are specified, …\nClear ignore module filters. If none are specified, …\nInspect the config of a running Logger\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninit function. Globally initializes the CombinedLogger as …\ninit function. Globally initializes the SimpleLogger as …\ninit function. Globally initializes the TermLogger as the …\ninit function. Globally initializes the WriteLogger as the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nReturns the set Level for this Logger\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nallows to create a new logger, that can be independently …\nallows to create a new logger, that can be independently …\nallows to create a new logger, that can be independently …\nallows to create a new logger, that can be independently …\nCreate a new default ConfigBuilder\nSet the color used for printing the level (if the logger …\nSet how the levels should be padded, when logging (default …\nSet at which level and above (more verbose) a source code …\nSet at which level and above (more verbose) the level …\nSet at which level and above (more verbose) the target …\nSet how the thread should be padded\nSet at which level and above (more verbose) the thread id …\nSet the mode for logging the thread\nSet how the thread should be padded\nSets the time format to a custom representation.\nSet time format string to use rfc2822.\nSet time format string to use rfc3339.\nSet at which level and  above (more verbose) the current …\nSet offset used for logging time (default is UTC)\nSets the offset used to the current local time offset …\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.")