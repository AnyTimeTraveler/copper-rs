searchState.loadedDescShard("i2cdev", 0, "i2cdev\nCore I2C abstractions\nLinux I2C device support\nMock I2C device\nError type\nI2C transfer error type\nInterface to an I2C Slave Device from an I2C Master\nRead/Write I2C message\nInterface to an I2C Bus from an I2C Master\nI2C transfer message type\nRead data from the device to fill the provided slice\nRead data from device\nSelect a register, send 1 to 31 bytes of data to it, and …\nSelect a register, send 16 bits of data to it, and read 16 …\nRead a block of up to 32 bytes from a device\nRead a single byte from a device, without specifying a …\nRead a single byte from a device, from a designated …\nRead a block of up to 32 bytes from a device\nRead 2 bytes from a given register on a device (lsb first)\nWrite a block of up to 32 bytes to a device\nWrite a single byte to a device, without specifying a …\nWrite a single byte to a specific register on a device\nWrite a block of up to 32 bytes from a device\nThis sends a single bit to the device, at the place of the …\nWrite 2 bytes to a given register on a device (lsb first)\nPerforms multiple serially chained I2C read/write …\nWrite the provided buffer to the device\nWrite data to device\nErrno from a failing <code>libc</code> call. Sourced  from <code>nix</code>.\nVarious flags used by the i2c_rdwr ioctl on Linux. For …\nForce message to ignore acknowledgement\nForce this message to ignore I2C negative acknowlegements\nIf you need to invert a ‘read’ command bit to a ‘…\nInput/output error\nLinux I2C bus\nConcrete linux I2C device\nLinux I2C errors\nLinux I2C message\nAvoid sending an I2C start condition on this message\nRead data, from slave to master\nForce an I2C stop condition on this message\nUse ten bit addressing on this message\nAllow the client to specify how many bytes it will send\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nCreate a new I2CDevice for the specified path, without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate a new I2CDevice for the specified path\nCreate a new LinuxI2CBus for the specified path\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRead data from the device to fill the provided slice\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the slave address for this device\nEnable/Disable PEC support for this device\nSelect a register, send 1 to 31 bytes of data to it, and …\nSelect a register, send 16 bits of data to it, and read 16 …\nRead a block of up to 32 bytes from a device\nRead a single byte from a device, without specifying a …\nRead a single byte from a device, from a designated …\nRead a block of up to 32 bytes from a device via …\nRead 2 bytes form a given register on a device\nWrite a block of up to 32 bytes to a device\nWrite a single byte to a sdevice, without specifying a …\nWrite a single byte to a specific register on a device\nWrite a block of up to 32 bytes from a device via …\nThis sends a single bit to the device, at the place of the …\nWrite 2 bytes to a given register on a device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIssue the provided sequence of I2C transactions\nIssue the provided sequence of I2C transactions\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSet the target device address for the message\nSet optional message flags\nWrite the provided buffer to the device\nContains the error value\nMock I2C device register map\nI2C mock result type\nMock I2C device exposing a register map\nMock I2C message\nContains the success value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new mock I2C register map\nCreate a new mock I2C device\nI2C register map\nIssue the provided sequence of I2C transactions\nWrite data to device\nSet several registers starting at the given offset")